(herald "Examples")

(define (example-01)
  (spawn (lambda ()
	   (display 'thread-1) (newline) 'thread-1)
	 (current-thread) '())
  (spawn (lambda ()
	   (display 'thread-2) (newline) 'thread-2)
	 (current-thread) '())
  (display 'main-thread)
  (newline)
  'main)

(define (example-01a)
  (spawn (lambda ()
	   (display 'thread-1)
	   (newline)
	   (display 'thread-1-again)
	   (newline)
	   (display 'thread-1-yet-again)
	   (newline)
	   'thread-1)
	 (current-thread) '())
  (spawn (lambda ()
	   (display 'thread-2)
	   (newline)
	   (display 'thread-2-again)
	   (newline)
	   'thread-2)
	 (current-thread) '())
  (display 'main-thread)
  (newline)
  'main)

(define (example-02)
  (let ((thread-1 (spawn (lambda ()
			   (display 'thread-1) (newline) 'thread-1)
			 (current-thread) '()))
	(thread-2 (spawn (lambda ()
			   (display 'thread-2) (newline) 'thread-2)
			 (current-thread) '())))
    (display 'main-thread)
    (newline)
    (list thread-1 thread-2)))

(define (example-03)
  (clear-all-choice-points)
  (let ((x (amb 1 2 3 4 5))
	(y (amb 2 4 6)))
    (display "Trying: ") (display (list x y)) (newline)
    (if (and (even? x) (even? y)
	     (>= (+ x y) 7))
	(list x y)
	(fail))))

#||
(let ((lst (example-03)))
     (display "Trying real hard...") (newline)
     (if (or (not (number? (first lst)))
	     (not (number? (second lst)))
	     (< (first lst) (second lst)))
	 (fail)
	 lst))
||#

(define (example-04)
  (define foo (make-generic 'foo))
  (add-method foo
	      (make-method (list <top>)
			   (lambda (call-next-method obj)
			     (display (list '<top> obj))
			     (newline))))
  (add-method foo
	      (make-method (list <pair>)
			   (lambda (call-next-method obj)
			     (call-next-method)
			     (display (list '<pair> obj))
			     (newline))))
  (display "Integer:") (newline)
  (foo 123)
  (display "List:") (newline)
  (foo '(1 2 3))
  (display "Self-Application:") (newline)
  (foo foo))

(define (example-05)
  (define bar (make-generic 'bar))
  (add-method bar
	      (make-method (list <top> <top>)
			   (lambda (call-next-method lhs rhs)
			     (display "bar: ") (display (list lhs rhs)) (newline)
			     (display (list 'bar '<top> '<top>)) (newline))))
  (add-method bar
	      (make-method (list <object> <object>)
			   (lambda (call-next-method lhs rhs)
			     (call-next-method)
			     (display (list 'bar '<object> '<object>)) (newline))))
  (add-method bar
  	      (make-method (list <top> <pair>)
  			   (lambda (call-next-method lhs rhs)
  			     (call-next-method)
  			     (display (list 'bar '<top> '<pair>)) (newline))))
  (add-method bar
  	      (make-method (list <pair> <top>)
  			   (lambda (call-next-method lhs rhs)
  			     (call-next-method)
  			     (display (list 'bar '<pair> '<top>)) (newline))))
  (add-method bar
  	      (make-method (list <pair> <pair>)
  			   (lambda (call-next-method lhs rhs)
  			     (call-next-method)
  			     (display (list 'bar '<pair> '<pair>)) (newline))))
  (add-method bar
  	      (make-method (list <top> <number>)
  			   (lambda (call-next-method lhs rhs)
  			     (call-next-method)
  			     (display (list 'bar '<top> '<number>)) (newline))))
  (add-method bar
  	      (make-method (list <number> <top>)
  			   (lambda (call-next-method lhs rhs)
  			     (call-next-method)
  			     (display (list 'bar '<number> '<top>)) (newline))))
  (add-method bar
  	      (make-method (list <number> <number>)
  			   (lambda (call-next-method lhs rhs)
  			     (call-next-method)
  			     (display (list 'bar '<number> '<number>)) (newline))))
  (bar :a :b)
  (bar 123 :b)
  (bar :a 456)
  (bar 123 456)
  (bar '(1) 456)
  (bar 123 '(4))
  (bar '(1) '(4))
  (bar (make <object>) (make <object>)))

;;; Some examples to demonstrate Poem.
;;; =================================

(define (fact n)
  (if (<= n 0)
      1
      (* n (fact (- n 1)))))

(define fact2
  (lambda (n)
    (if (<= n 0)
	1
	(* n (fact2 (- n 1))))))

(define (example-10)
  (every? (lambda (n)
	    (= (fact n) (fact2 n)))
	  '(-1 2 3 4)))

(define (fact-iter n)
  (letrec ((iterate (lambda (n acc)
		      (if (<= n 0)
			  acc
			  (iterate (- n 1) (* n acc))))))
    (iterate n 1)))

(define (example-11)
  (every? (lambda (n)
	    (= (fact n) (fact-iter n)))
	  '(-1 2 3 4 5 6)))

(define (fact-iter-2 n)
  (let iterate ((n n) (acc 1))
    (if (<= n 0)
	acc
	(iterate (- n 1) (* n acc)))))

(define (example-12)
  (every? (lambda (n)
	    (= (fact-iter n) (fact-iter-2 n)))
	  '(-1 2 3 4 5 6)))

(define (example-13)
  (clear-all-choice-points)
  (an-integer-between 0 3))

(define (example-14)
  (clear-all-choice-points)
  (let ((x (an-integer-between 0 7)))
    (if (< x 3)
	(fail)
	x)))

(define (example-15)
  (clear-all-choice-points)
  (let ((x (an-integer-between 0 7))
	(y (an-integer-between 2 5)))
    (if (or (not (number? x))
	    (not (number? y))
	    (not (= (+ x y) 9)))
	(fail)
	(list x y))))
