(herald "Bootstrap Procedures")

;;; List Manipulation
;;; =================

(lset! assq
       (lambda (object alist)
	 (if (null? alist) #f
	     (if (eq? object (car (car alist)))
		 (car alist)
		 (assq object (cdr alist))))))
(name! assq 'assq)

(lset! list (lambda args args))
(name! list 'list)

(lset! map1 
       (lambda (proc lst)
	 (if (null? lst)
	     '()
	     (cons (proc (car lst)) (map1 proc (cdr lst))))))
(name! map1 'map1)

(lset! append2 
       (lambda (lst1 lst2)
	 (if (null? lst1)
	     lst2
	     (cons (car lst1) (append2 (cdr lst1) lst2)))))
(name! append2 'append2)

(lset! as-par-t-boolean
       (lambda (lisp-boolean)
	 (lisp-call 'as-par-t-boolean
		    (list lisp-boolean))))

(lset! read
       (lambda ()
	 (lisp-call 'par-t-read '())))

(lset! write
       (lambda (obj)
	 (lisp-call 'par-t-write (list obj))))

(lset! display
       (lambda (obj)
	 (lisp-call 'display (list obj))))

(lset! newline
       (lambda ()
	 (lisp-call 'newline '())))

(lset! random
       (lambda (obj)
	 (lisp-call 'random (list obj))))

(lset! eof-object?
       (lambda (obj)
	 (as-par-t-boolean
	  (lisp-call 'eof-object-p (list obj)))))

(lset! gensym
       (lambda (prefix)
	 (lisp-call 'gensym (list prefix))))

;;; Evaluation
;;; ==========

(lset! eval
       (lambda (form)
	 ((compiler form))))
(name! eval 'eval)

(lset! constant?
       (lambda (form)
	 (if (number? form)
	     #t
	     (if (string? form)
		 #t
		 (if (pair? form)
		     (eq? (car form) 'quote)
		     #f)))))
(name! constant? 'constant?)

;;; Quasiquotation
;;; ==============

(lset! combine-non-constant-quasiquote
       (lambda (left right form)
	 (if (null? right)
	     (list 'list left)
	     (if (pair? right)
		 (if (eq? (car right) 'list)
		     (cons 'list (cons left (cdr right)))
		     (list 'cons left right))
		 (list 'cons left  right)))))
(name! combine-non-constant-quasiquote
       'combine-non-constant-quasiquote)

(lset! combine-quasiquote
       (lambda (left right form)
	 (if (constant? left)
	     (if (constant? right)
		 (if (eq? (eval left) (car form))
		     (if (eq? (eval right) (cdr form))
			 (list 'quote form)
			 (list 'quote (cons (eval left) (eval right))))
		     (list 'quote (cons (eval left) (eval right))))
		 (combine-non-constant-quasiquote left right form))
	     (combine-non-constant-quasiquote left right form))))
(name! combine-quasiquote 'combine-quasiquote)

(lset! expand-quasiquote
       (lambda (form)
	 (if (null? form)
	     '()
	     (if (pair? form)
		 (if (eq? (car form) 'unquote)
		     ;; (assert (and (cdr form) (null? (cddr form))))
		     (cadr form)
		     (if (eq? (car form) 'quasiquote)
			 (expand-quasiquote (expand-quasiquote (cadr form)))
			 (if (pair? (car form))
			     (if (eq? (car (car form)) 'unquote-splicing)
				 (if (null? (cdr form))
				     (cadr (car form))
				     (list 'append2
					   (cadr (car form))
					   (expand-quasiquote (cdr form))))
				 (combine-quasiquote (expand-quasiquote (car form))
						     (expand-quasiquote (cdr form))
						     form))
			     (combine-quasiquote (expand-quasiquote (car form))
						 (expand-quasiquote (cdr form))
						 form))))
		 ;; Not a pair.
		 ;; Case for vectors should go here
		 (if (constant? form)
		     form
		     (list 'quote form))))))
(name! expand-quasiquote 'expand-quasiquote)
