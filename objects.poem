(herald "Par-T object system")

;;; Topological Sort and Class-Precedence-List Computation
;;; ======================================================

(define (compute-std-cpl c get-direct-supers)
  (top-sort ((build-transitive-closure get-direct-supers) c)
	    ((build-constraints get-direct-supers) c)
	    (std-tie-breaker get-direct-supers)))


(define (top-sort elements constraints tie-breaker)
  (let loop ((elements elements)
	     (constraints constraints)
	     (result '()))
    (if (null? elements)
	result
	(let ((can-go-in-now
	       (collect-if
		(lambda (x)
		  (every? (lambda (constraint)
			    (or (not (eq? (cadr constraint) x))
				(memq? (car constraint) result)))
			  constraints))
		elements)))
	  (if (null? can-go-in-now)
	      (error 'top-sort "Invalid constraints")
	      (let ((choice (if (null? (cdr can-go-in-now))
				(car can-go-in-now)
				(tie-breaker result can-go-in-now))))
		(loop
		 (collect-if (lambda (x) (not (eq? x choice)))
			     elements)
		 constraints
		 (append result (list choice)))))))))

(define (std-tie-breaker get-supers)
  (lambda (partial-cpl min-elts)
    (let loop ((pcpl (reverse partial-cpl)))
      (let ((current-elt (car pcpl)))
	(let ((ds-of-ce (get-supers current-elt)))
	  (let ((common (collect-if (lambda (x)
				      (memq? x ds-of-ce))
				    min-elts)))
	    (if (null? common)
		(if (null? (cdr pcpl))
		    (error 'std-tie-breaker "Nothing valid")
		    (loop (cdr pcpl)))
		(car common))))))))


(define (build-transitive-closure get-follow-ons)
  (lambda (x)
    (let track ((result '())
		(pending (list x)))
      (if (null? pending)
	  result
	  (let ((next (car pending)))
	    (if (memq? next result)
		(track result (cdr pending))
		(track (cons next result)
		       (append (get-follow-ons next)
			       (cdr pending)))))))))

(define (build-constraints get-follow-ons)
  (lambda (x)
    (let loop ((elements ((build-transitive-closure get-follow-ons) x))
	       (this-one '())
	       (result '()))
      (if (or (null? this-one) (null? (cdr this-one)))
	  (if (null? elements)
	      result
	      (loop (cdr elements)
		    (cons (car elements)
			  (get-follow-ons (car elements)))
		    result))
	  (loop elements
		(cdr this-one)
		(cons (list (car this-one) (cadr this-one))
		      result))))))

;;; Classes
;;; =======

(define (class-of x)
  (cond ((%instance? x)   (%instance-class x))
	((pair? x)        <pair>)
	((null? x)        <null>)
	((boolean? x)     <boolean>)
	((symbol? x)      <symbol>)
	((procedure? x)   <procedure>)
	((number? x)      <number>)
	((vector? x)      <vector>)
	((char? x)        <char>)
	((string? x)      <string>)
	;; ((input-port? x)  <input-port>)
	;; ((output-port? x) <output-port>)
	))

(define *getters-and-setters-for-class*
  (let loop ((index 0)
	     (slots *the-slots-of-a-class*)
	     (result '()))
    (if (null? slots)
	(reverse result)
	(loop (+ index 1)
	      (cdr slots)
	      (cons (list (car slots)
			  (lambda (o)   (%instance-ref  o index))
			  (lambda (n o) (%instance-setter! n o index)))
		    result)))))

;;; The bootstrap version of `make'.
;;;
(define (make class . initargs)
  (cond ((or (eq? class <class>)
	     (eq? class <entity-class>))
	 (let* ((new (%allocate-instance
		      class
		      (length *the-slots-of-a-class*)))
		(name (getl initargs 'name #f))
		(dsupers (getl initargs 'direct-supers '()))
		(dslots  (map list
			      (getl initargs 'direct-slots  '())))
		(cpl     (let loop ((sups dsupers)
				    (so-far (list new)))
			   (if (null? sups)
			       (reverse so-far)
			       (loop (class-direct-supers
				      (car sups))
				     (cons (car sups)
					   so-far)))))
		(slots (apply append
			      (cons dslots
				    (map class-direct-slots
					 (cdr cpl)))))
		(n-fields 0)
		(field-initializers '())
		(allocator
		 (lambda (init)
		   (let ((f n-fields))
		     (set! n-fields (+ n-fields 1))
		     (set! field-initializers
			   (cons init field-initializers))
		     (list (lambda (o)   (%instance-ref  o f))
			   (lambda (n o) (%instance-setter! n o f))))))
		(getters-and-setters
		 (map (lambda (s)
			(cons (car s)
			      (allocator (lambda () '()))))
		      slots)))
	   
	   (slot-set! new 'name                 name)
	   (slot-set! new 'direct-supers        dsupers)
	   (slot-set! new 'direct-slots         dslots)
	   (slot-set! new 'cpl                  cpl)
	   (slot-set! new 'slots                slots)
	   (slot-set! new 'n-fields             n-fields)
	   (slot-set! new 'field-initializers   (reverse
						 field-initializers))
	   (slot-set! new 'getters-and-setters  getters-and-setters)
	   new))
	((eq? class <generic>)
	 (let ((name (getl initargs 'name #f))
	       (new (%allocate-entity class
				      (length (class-slots class)))))
	   (slot-set! new 'name name)
	   (slot-set! new 'methods '())
	   new))
	((eq? class <method>)
	 (let ((new (%allocate-instance
		     class
		     (length (class-slots class)))))
	   (slot-set! new
		      'specializers
		      (getl initargs 'specializers))
	   (slot-set! new
		      'procedure
		      (getl initargs 'procedure))
	   new))))


(define (slot-ref object slot-name)
  ;; (display "slot-ref ") (display slot-name)
  ;; (newline)
  (let* ((info (lookup-slot-info (class-of object) slot-name))
	 (getter (list-ref info 0)))
    ;; (display "info and getter: ") (write (list info getter))
    ;; (newline)
    (getter object)))

(define (slot-set! object slot-name new-value)
  ;; (display "slot-set! ") (display (list slot-name new-value))
  ;; (newline)
  (let* ((info (lookup-slot-info (class-of object) slot-name))
	 (setter (list-ref info 1)))
    ;; (display "info and setter: ") (write (list info setter))
    ;; (newline)
    (setter new-value object)))

(define (lookup-slot-info class slot-name)
  ;; (display "lookup-slot-info")
  ;; (newline)
  ;; (display "slot-name and <class>? ") (write (list slot-name (eq? class <class>)))
  ;; (newline)
  (let* ((getters-and-setters
	  (if (eq? class <class>)
	      *getters-and-setters-for-class*
	      (slot-ref class 'getters-and-setters)))
	 (entry (assq slot-name getters-and-setters)))
    ;; (display "entry: ")  (write entry)
    ;; (newline)
    (if entry
	(cdr entry)
	(error "No slot" slot-name "in instances of" class))))

(define class-direct-slots
    (lambda (class) (slot-ref class 'direct-slots)))
(define class-direct-supers
    (lambda (class) (slot-ref class 'direct-supers)))
(define class-slots
    (lambda (class) (slot-ref class 'slots)))
(define class-cpl
    (lambda (class) (slot-ref class 'cpl)))

(define generic-methods
    (lambda (generic) (slot-ref generic 'methods)))

(define method-specializers
    (lambda (method) (slot-ref method 'specializers)))
(define method-procedure
    (lambda (method) (slot-ref method 'procedure)))


(define <top> (make <class>
		'name '<top>
		'direct-supers (list)
		'direct-slots  (list)))

(define <object> (make <class>
		   'name '<object>
		   'direct-supers (list <top>)
		   'direct-slots  (list)))

(slot-set! <class> 'name
	   '<class>)
(slot-set! <class> 'direct-supers
	   (list <object>))
(slot-set! <class> 'direct-slots
	   (map list *the-slots-of-a-class*))
(slot-set! <class> 'cpl
	   (list <class> <object> <top>))
(slot-set! <class> 'slots
	   (map list *the-slots-of-a-class*))
(slot-set! <class> 'n-fields
	   (length *the-slots-of-a-class*))
(slot-set! <class> 'field-initializers
	   (map (lambda (s)
		  (lambda () '()))
		*the-slots-of-a-class*))
(slot-set! <class> 'getters-and-setters '())


(define <procedure-class> (make <class>
			    'name '<procedure-class>
			    'direct-supers (list <class>)
			    'direct-slots  (list)))

(define <entity-class> (make <class>
			 'name '<entity-class>
			 'direct-supers (list <procedure-class>)
			 'direct-slots  (list)))

(define <generic> (make <entity-class>
		    'name '<generic>
		    'direct-supers (list <object>)
		    'direct-slots  (list 'name 'methods)))

(define <method> (make <class>
		   'name '<method>
		   'direct-supers (list <object>)
		   'direct-slots  (list 'specializers
					'procedure)))

;;; Three convenient shortcuts.
;;;
(define (make-class name direct-supers direct-slots)
  (make <class>
    'name name
    'direct-supers direct-supers
    'direct-slots  direct-slots))

(define (make-generic name)
  (make <generic> 'name name))

(define (make-method specializers procedure)
  (make <method>
    'specializers specializers
    'procedure    procedure))


;;; The initialization protocol
;;;
(define initialize (make-generic 'initialize))
	    

;;; The instance structure protocol.
;;;
(define allocate-instance (make-generic 'allocate-instance))
(define compute-getter-and-setter (make-generic 'compute-getter-and-setter))


;;; The class initialization protocol.
;;;
(define compute-cpl (make-generic 'compute-cpl))
(define compute-slots (make-generic 'compute-slots))


;;; The generic invocation protocol.
;;;
(define compute-apply-generic (make-generic 'compute-apply-generic))
(define compute-methods (make-generic 'compute-methods))
(define compute-method-more-specific? (make-generic 'compute-method-more-specific?))
(define compute-apply-methods (make-generic 'compute-apply-methods))


;;; The next thing to do is bootstrap generic functions.
;;;
(define generic-invocation-generics (list compute-apply-generic
					  compute-methods
					  compute-method-more-specific?
					  compute-apply-methods))

(define (add-method generic method)
  ;; (display "add-method ") (slot-ref generic 'name)
  ;; (newline)
  (slot-set! generic
	     'methods
	     (cons method
		   (collect-if
		    (lambda (m)
		      (not (every? eq?
				   (method-specializers m)
				   (method-specializers method))))
		    (slot-ref generic 'methods))))
  (%instance-proc-setter! (compute-apply-generic generic) generic))


; Adding a method calls COMPUTE-APPLY-GENERIC, the result of which calls
; the other generics in the generic invocation protocol.  Two, related,
; problems come up.  A chicken and egg problem and a infinite regress
; problem.
;
; In order to add our first method to COMPUTE-APPLY-GENERIC, we need
; something sitting there, so it can be called.  The first definition
; below does that.
; 
; Then, the second definition solves both the infinite regress and the
; not having enough of the protocol around to build itself problem the
; same way: it special cases invocation of generics in the invocation
; protocol.

(%instance-proc-setter! (lambda (generic)
			  ;; (display "compute-apply-generic #f")
			  ;; (newline)
			  (let ((method (car (generic-methods generic))))
			    ((method-procedure method) #f generic)))
			compute-apply-generic)

(add-method compute-apply-generic
  (make-method (list <generic>)
    (lambda (call-next-method generic)
      ;; (display "compute-apply-generic <generic>")
      ;; (newline)
      (lambda args
	;; (display "compute-apply-generic <generic> (nested) ")
	;; (display args)
	;; (newline)
	(if (and (memq? generic generic-invocation-generics)
		 (memq? (car args) generic-invocation-generics))
	    (apply (method-procedure
		    (last (generic-methods generic)))
		   (cons #f args))
	    ((compute-apply-methods generic)
	     ((compute-methods generic) args)
	     args))))))


(add-method compute-methods
  (make-method (list <generic>)
    (lambda (call-next-method generic)
      ;; (display "compute-methods <generic>")
      ;; (newline)
      (lambda (args)
	(let ((applicable
	       (collect-if (lambda (method)
			     (every? applicable?
				     (method-specializers method)
				     args))
			   (generic-methods generic))))
	  (gsort (lambda (m1 m2)
		   ((compute-method-more-specific? generic)
		    m1
		    m2
		    args))
		 applicable))))))


(add-method compute-method-more-specific?
  (make-method (list <generic>)
    (lambda (call-next-method generic)
      ;; (display "compute-method-more-specific? <generic>")
      ;; (newline)
      (lambda (m1 m2 args)
	(let loop ((specls1 (method-specializers m1))
		   (specls2 (method-specializers m2))
		   (args args))
	  ;; (display "compute-method-more-specific? <generic> nested")
	  ;; (newline)
	  ;; (display (list specls1 specls2 args))
	  ;; (newline)
	  (cond ((and (null? specls1) (null? specls2))
		 (error
		  "Two methods are equally specific."))
		((or  (null? specls1) (null? specls2))
		 (error
		  "Two methods have a different number of specializers."))
		((null? args)
		 (error
		  "Fewer arguments than specializers."))
		(else
		 (let ((c1  (car specls1))
		       (c2  (car specls2))
		       (arg (car args)))
		   (if (eq? c1 c2)
		       (loop (cdr specls1)
			     (cdr specls2)
			     (cdr args))
		       (more-specific? c1 c2 arg))))))))))


(add-method compute-apply-methods
  (make-method (list <generic>)
    (lambda (call-next-method generic)
      ;; (display "compute-apply-methods <generic>")
      ;; (newline)
      (lambda (methods args)
	;; (display "compute-apply-methods <generic> (nested) ")
	;; (display (list methods args))
	;; (newline)
	(letrec ((one-step
		  (lambda (tail)
		    (lambda ()
		      ;; (display "  tail: ") (display tail)
		      ;; (newline)
		      (if (null? tail)
			  (error "No applicable methods/next methods.")
			  (apply (method-procedure (car tail))
				 (cons (one-step (cdr tail)) args)))))))
	  ((one-step methods)))))))

(define (applicable? c arg)
  (memq? c (class-cpl (class-of arg))))

(define (more-specific? c1 c2 arg)
  (memq? c2 (memq? c1 (class-cpl (class-of arg)))))


(add-method initialize
  (make-method (list <object>)
    (lambda (call-next-method object initargs) object)))

(add-method initialize
  (make-method (list <class>)
    (lambda (call-next-method class initargs)
      ;; (display "initialize <class>: ") (display class)
      ;; (newline)
      ;; (display "  ") (display initargs)
      ;; (newline)
      ;; (call-next-method)
      ;; (display "Called next method")
      ;; (newline)
      (slot-set! class
		 'direct-supers
		 (getl initargs 'direct-supers '()))
      (slot-set! class
		 'direct-slots
		 (map (lambda (s)
			(if (pair? s) s (list s)))
		      (getl initargs 'direct-slots  '())))
      (slot-set! class 'cpl   (compute-cpl   class))
      (slot-set! class 'slots (compute-slots class))
      ;; (display "Set slots")
      ;; (newline)
      (let* ((n-fields 0)
	     (field-initializers '())
	     (allocator
	      (lambda (init)
		(let ((f n-fields))
		  (set! n-fields (+ n-fields 1))
		  (set! field-initializers
			(cons init field-initializers))
		  (list (lambda (o)   (%instance-ref  o f))
			(lambda (n o) (%instance-setter! n o f))))))
	     (getters-and-setters
	      (map (lambda (slot)
		     (cons (car slot)
			   (compute-getter-and-setter class
						      slot
						      allocator)))
		   (slot-ref class 'slots))))
	(slot-set! class 'n-fields n-fields)
	(slot-set! class 'field-initializers field-initializers)
	(slot-set! class 'getters-and-setters getters-and-setters)
	(slot-set! class 'name (getl initargs 'name #f))))))

(add-method initialize
  (make-method (list <generic>)
    (lambda (call-next-method generic initargs)
      ;; (display "initialize <generic>")
      ;; (newline)
      (call-next-method)
      (slot-set! generic 'methods '())
      (%instance-proc-setter! (lambda args (error "Has no methods."))
			      generic))))

(add-method initialize
  (make-method (list <method>)
    (lambda (call-next-method method initargs)
      ;; (display "initialize <method>")
      ;; (newline)
      (call-next-method)
      (slot-set! method 'specializers (getl initargs 'specializers))
      (slot-set! method 'procedure    (getl initargs 'procedure)))))


(add-method allocate-instance
  (make-method (list <class>)
    (lambda (call-next-method class)
      (let* ((field-initializers (slot-ref class 'field-initializers))
	     (new (%allocate-instance
		   class
		   (length field-initializers))))
	(let loop ((n 0)
		   (inits field-initializers))
	  (if (pair? inits)
	      (begin
		(%instance-setter! ((car inits)) new n)
		(loop (+ n 1)
		      (cdr inits)))
	      new))))))

(add-method allocate-instance
  (make-method (list <entity-class>)
    (lambda (call-next-method class)
      (let* ((field-initializers (slot-ref class 'field-initializers))
	     (new (%allocate-entity
		   class
		   (length field-initializers))))
	(let loop ((n 0)
		   (inits field-initializers))
	  (if (pair? inits)
	      (begin
		(%instance-setter! ((car inits)) new n)
		(loop (+ n 1)
		      (cdr inits)))
	      new))))))


(add-method compute-cpl
  (make-method (list <class>)
    (lambda (call-next-method class)
      (compute-std-cpl class class-direct-supers))))


(add-method compute-slots
  (make-method (list <class>)
    (lambda (call-next-method class)
      (let collect ((to-process (apply append
				       (map class-direct-slots
					    (class-cpl class))))
		    (result '()))
	(if (null? to-process)
	    (reverse result)
	    (let* ((current (car to-process))
		   (name (car current))
		   (others '())
		   (remaining-to-process
		    (collect-if (lambda (o)
				  (if (eq? (car o) name)
				      (begin
					(set! others (cons o others))
					#f)
				      #t))
				(cdr to-process))))
	      (collect remaining-to-process
		       (cons (append current
				     (apply append (map cdr others)))
			     result))))))))


(add-method compute-getter-and-setter
  (make-method (list <class>)
    (lambda (call-next-method class slot allocator)
      (allocator (lambda () '())))))

; Now everything works, both generic functions and classes, so we can
; turn on the real MAKE.

(set! make
      (lambda (class . initargs)
	(let ((instance (allocate-instance class)))
	  (initialize instance initargs)
	  instance)))

(define <primitive-class>
  (make <class>
    'name '<primitive-class>
    'direct-supers (list <class>)
    'direct-slots (list)))

(define (make-primitive-class name . class)
  (make (if (null? class) <primitive-class> (car class))
    'name name
    'direct-supers (list <top>)
    'direct-slots  (list)))


(define <pair>        (make-primitive-class '<pair>))
(define <null>        (make-primitive-class '<null>))
(define <symbol>      (make-primitive-class '<symbol>))
(define <boolean>     (make-primitive-class '<boolean>))
(define <procedure>   (make-primitive-class '<procedure> <procedure-class>))
(define <number>      (make-primitive-class '<number>))
(define <vector>      (make-primitive-class '<vector>))
(define <char>        (make-primitive-class '<char>))
(define <string>      (make-primitive-class '<string>))
(define <input-port>  (make-primitive-class '<input-port>))
(define <output-port> (make-primitive-class '<output-port>))
