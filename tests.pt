(define (call/cc-test-01)
  (cons 1 (call/cc (lambda (cc)
		     (cons 2 '(3))))))

(define (call/cc-test-02)
  (cons 1 (call/cc (lambda (cc)
		     (cons 2 (cc '(3)))))))

(define (call/cc-test-03)
  (cons 1 (call/cc (lambda (cc)
		     (cons 2 (cons 3 (cc '())))))))

(define (call/cc-test-04)
  (let ((my-cont '()))
    (write
     (cons 1 (call/cc (lambda (cc)
			(set! my-cont
			      (lambda (x)
				(set! my-cont (lambda (y)
						(write (cons 'done y))
						(newline)))
				(cc x)))
			(cons 2 '(3))))))
    (newline)
    (my-cont '(foo))))

(define (call/cc-tests)
  (write (call/cc-test-01))
  (newline)
  (write (call/cc-test-02))
  (newline)
  (write (call/cc-test-03))
  (newline)
  (write (call/cc-test-04))
  (newline))

(define (boolean-values-test)
  (and (eq? #t #t)
       (eq? #f #f)
       (not (eq? #t #f))))

(define (if-test-01)
  (and (if #t #t #f)
       (if #f #f #t)))

(define (if-test-02)
  (and (if (not #t) #f #t)
       (if (not #f) #t #f)))

(define (if-test-03)
  (and (if 1 #t #f)
       (if '() #t #f)))

(define (type-predicate-test-pair)
  (and (pair? '(1 2))
       (not (pair? #f))
       (not (pair? 1))))

(define (type-predicate-test-null)
  (and (null? '())
       (not (null? #f))
       (not (null? '(1 2)))
       (not (null? 1))))

(define (boolean-tests)
  (write (list (boolean-values-test)
	       (if-test-01)
	       (if-test-02)
	       (if-test-03)))
  (newline))

(define (type-predicate-tests)
  (write (list (type-predicate-test-pair)
	       (type-predicate-test-null)))
  (newline))

(define (all-tests)
  (boolean-tests)
  (type-predicate-tests))
