(herald "Par-T-Standard-Library")

(define else #t)

(define (undefined)
  'the-undefined-value)

(define (identity x)
  x)

;;; What should a better version of this do?
(define (error . args)
  (write args)
  (newline)
  args)

(define (as-lisp-boolean par-t-obj)
  (if (eq? par-t-obj #f)
      'cl:nil
      'cl:t))

(define (convert-nil-to-false par-t-obj)
  (if (eq? par-t-obj 'cl::nil)
      #f
      par-t-obj))

;;; Macro Expansion
;;; ===============

;; (define (macro-expand-1 exp)
;;   (if (pair? exp)
;;       (let ((expander (par-t-macro (first exp))))
;; 	(if expander
;; 	    (apply expander (rest exp))
;; 	    exp))
;;       exp))

;;; Function Calling
;;; ================

(define (apply proc . args)
  (if (null? (cdr args))
      (%apply proc (car args))
      (%apply proc (%apply list* args))))


;;; List Functions
;;; ==============

(define (list? obj)
  (or (null? obj) (pair? obj)))

;;; `list' is defined in file `macros.pt'

(define (list* . args)
  (let chase ((args args))
    (cond ((null? args) '())
	  ((null? (cdr args)) (car args))
	  (else (cons (car args) (chase (cdr args)))))))

(define (cddr lst)
  (cdr (cdr lst)))

(define (caddr lst)
  (car (cddr lst)))

(define (cdddr lst)
  (cdr (cddr lst)))

(define (cadddr lst)
  (car (cdddr lst)))

(define (cddddr lst)
  (cdr (cdddr lst)))

(define (first lst)
  (car lst))

(define (second lst)
  (cadr lst))

(define (third lst)
  (caddr lst))

(define (fourth lst)
  (cadddr lst))

(define (fifth lst)
  (car (cddddr lst)))

(define (sixth lst)
  (cadr (cddddr lst)))

(define (seventh lst)
  (caddr (cddddr lst)))

(define (eigth lst)
  (cadddr (cddddr lst)))

(define (ninth lst)
  (car (cddddr (cddddr lst))))

(define (list-ref lst n)
  (cond ((null? lst)
	 #f)
	((= n 0)
	 (car lst))
	(else
	 (list-ref (cdr lst) (- n 1)))))

(define (starts-with lst thing)
  (eqv? (first lst) thing))

(define (rest lst)
  (cdr lst))

(define (rest2 lst)
  (cddr lst))

(define (last lst)
  (if (null? lst)
      #f
      (if (null? (cdr lst))
	  (car lst)
	  (last (cdr lst)))))


(define (ass pred object alist)
  (cond ((null? alist)
	 #f)
	((pred object (first (first alist)))
	 (first alist))
	(else 
	 (ass pred object (rest alist)))))

;;; `assq' is already defined as a bootstrap procedure.
;; (define (assq object alist)
;;   (ass eq? object alist))

(define (assv object alist)
  (ass eqv? object alist))

(define (assoc object alist)
  (ass equal? object alist))


(define (mem? pred object lst)
  (cond ((null? lst)
	 #f)
	;; ((not (pair? lst))
	;; #f)
	((pred object (first lst))
	 lst)
	(else
	 (mem? pred object (cdr lst)))))

(define (memq? object lst)
  (mem? eq? object lst))

(define (memv? object lst)
  (mem? eqv? object lst))

(define (member? object lst)
  (mem? equal? object lst))

(define (union . lists)
  (let clean ((lst (apply append lists))
	      (result '()))
    (cond ((null? lst) result)
	  ((memq? (car lst) result)
	   (clean (cdr lst) result))
	  (else
	   (clean (cdr lst) (cons (car lst) result))))))

(define (collect-if test? list)
  (cond ((null? list) '())
	((test? (car list))
	 (cons (car list) (collect-if test? (cdr list))))
	(else (collect-if test? (cdr list)))))

(define (remove-duplicates lst)
  (let loop ((result-so-far '())
	     (remaining lst))
    (if (null? remaining)
	result-so-far
	(if (null? (memq? (car remaining) result-so-far))
	    (loop (cons (car remaining) result-so-far)
		  (cdr remaining))
	    (loop result-so-far
		  (cdr remaining))))))

(define (partition-list pred pivot lst)
  (let loop ((small-elts '())
	     (large-elts '())
	     (lst lst))
    (if (null? lst)
	(cons small-elts large-elts)
	(let ((current (car lst)))
	  (if (pred current pivot)
	      (loop (cons current small-elts) large-elts (cdr lst))
	      (loop small-elts (cons current large-elts) (cdr lst)))))))

(define (gsort pred lst)
  (cond ((null? lst)
	 '())
	((null? (cdr lst))
	 lst)
	(else
	 (let* ((pivot  (car lst))
		(part (partition-list pred pivot (cdr lst)))
		(small-elts (gsort pred (car part)))
		(large-elts (gsort pred (cdr part))))
	   (append small-elts (cons pivot large-elts))))))

;;; Thie following definitions are taken from Tiny Clos.  They should
;;; be integrated with a more principled library.

(define (position-of x lst)
  (let scan ((count 0)
	     (tail lst))
    (cond ((null? tail)
	   #f)
	  ((eq? x (car tail))
	   count)
	  (else
	   (scan (+ count 1) (cdr tail))))))

;;; Two helper procedures for the implementation of mapping functions.
;;;
(define (any-null? lst)
  (cond ((null? lst) #f)
	((null? (car lst)) #t)
	(else (any-null? (cdr lst)))))

;;; `map1' is defined in `macros.pt' since it is needed for `let'.

(define (any? test . lists)
  (let scan ((tails lists))
    (if (or (null? tails)
	    (any-null? tails))
	#f
	(or (%apply test (map1 car tails))
	    (scan (map1 cdr tails))))))

(define (every? test . lists)
  (let scan ((tails lists))
    (if (or (null? tails)
	    (any-null? tails))
	#t
	(and (%apply test (map1 car tails))
	     (scan (map1 cdr tails))))))

(define (map proc . lists)
  (let chase ((tails lists))
    (if (any-null? tails)
	'()
	(cons (%apply proc (map1 first tails))
	      (chase (map1 rest tails))))))

(define (for-each proc . lists)
  (let chase ((tails lists))
    (if (any-null? tails)
	(undefined)
	(begin
	  (apply proc (map1 first tails))
	  (chase (map1 rest tails))))))

(define (remove x list)
  (cond ((null? list) '())
	((eq? (car list) x) (cdr list))
	(else (cons (car list) (remove x (cdr list))))))

(define (getl plist name . not-found)
  (let scan ((tail plist))
    (cond ((null? tail)
	   (if (pair? not-found)
	       (first not-found)
	       (error "GETL couldn't find" name)))
	  ((eq? (first tail) name) (second tail))
	  (else (scan (rest2 tail))))))


(define (length lst)
  (let scan ((tail lst)
	     (result 0))
    (if (null? tail)
	result
	(scan (rest tail) (+ result 1)))))

(define (length=1 lst)
  (and (pair? lst)
       (null (cdr lst))))

(define (reverse lst)
  (let scan ((tail lst)
	     (result '()))
    (if (null? tail)
	result
	(scan (cdr tail) (cons (car tail) result)))))

(define (append . lists)
  (cond ((null? lists)
	 '())
	((null? (cdr lists))
	 (car lists))
	;; This is quite inefficient; should start from the back of
	;; the lists...
	(else
	 (apply append 
		(append2 (car lists) (cadr lists))
		(rest2 lists)))))


(define (map-append proc . lists)
  (apply append (apply map (cons proc lists))))


;;; Numeric Functions
;;; =================

(define (mod m n)
  (lisp-call 'mod (list m n)))

(define (even? n)
  (= 0 (mod n 2)))

(define (odd? n)
  (/= 0 (mod n 2)))


;;; Loading files
;;; =============

(define (load file-name)
  (lisp-call 'load-par-t-file (list file-name)))

(define (system-file file-name)
  (lisp-call 'par-t-system-file (list file-name)))

;;; Non-Deterministic Computation
;;; =============================

(define choice-points '())

(define (clear-all-choice-points)
  (set! choice-points '()))

(define (fail)
  (if (null? choice-points)
      (error "Fail without choice point.")
      (let ((next-choice (first choice-points)))
	(set! choice-points (rest choice-points))
	(next-choice))))

(define (create-choice-points . procs)
  (call/cc (lambda (cc)
	     (let ((new-cps (map (lambda (proc)
				   (lambda ()
				     (cc (proc))))
				 procs)))
	       (set! choice-points
		     (append new-cps choice-points)))
	     (fail))))

(define-macro amb computations
  `(create-choice-points ,@(map (lambda (comp)
				  `(lambda () ,comp))
				computations)))

(define (an-integer->= n)
  (create-choice-points
   (lambda () n)
   (lambda () (an-integer->= (+ n 1)))))

(define (an-integer-between m n)
  (if (> m n)
      (fail)
      (create-choice-points
       (lambda () m)
       (lambda () (an-integer-between (+ m 1) n)))))
