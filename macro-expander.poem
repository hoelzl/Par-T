;;; Copyright (c) 2012 Matthias HÃ¶lzl
;;; 
;;; This file is licensed under the MIT license; see the file LICENSE
;;; in the root directory for further information.

(herald "Macro Expander")

;;; Handling of Par-T macros in Par-T
;;; =================================

;;; We can't use any macros here, because we are bootstrapping the
;;; macro system.  So there's no `define', `let', `and', etc.

;;; Let's get started with the definition of `define-macro'.  The
;;; expander function for this macro is called `%define-macro'; when
;;; this function is called it generates an entry of the form (name
;;; . expander-function) in the alist `*par-t-macros*'.
(lset! %define-macro
       (lambda (name args . body)
	 ((lambda (macro-binding)
	    (if macro-binding
		(cdr-setter! (eval (cons 'lambda  (cons args body)))
			     macro-binding)
		(lset! *par-t-macros*
		       (cons (cons name (eval (cons 'lambda (cons args body))))
			     *par-t-macros*))))
	  (assq name *par-t-macros*))
	 (list 'quote name)))
(set-name! %define-macro '%define-macro)

(lset! *par-t-macros*
       (cons (cons 'define-macro %define-macro) '()))

;;; The bootstrap environment of the compiler contains a version of
;;; `par-t-macro' that always returns false.  Define the real version
;;; only after the `*par-t-macros*' variable is defined, otherwise the
;;; compiler will not be able to compile anything.
(lset! par-t-macro
       (lambda (symbol)
	 (if (symbol? symbol)
	     ((lambda (binding)
		(if binding (cdr binding) #f))
	      (assq symbol *par-t-macros*))
	     #f)))
(set-name! par-t-macro 'par-t-macro)

(lset! macro-expand
       (lambda (exp)
	 (if (pair? exp) 
	     ((lambda (expander)
		(if expander
		    (macro-expand (%apply expander (cdr exp)))
		    exp))
	      (par-t-macro (car exp)))
	     exp)))
(set-name! macro-expand 'macro-expand)


