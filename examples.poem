(herald "Examples")

(define (example-01)
  (spawn (lambda ()
	   (display 'thread-1) (newline) 'thread-1)
	 (current-thread) '())
  (spawn (lambda ()
	   (display 'thread-2) (newline) 'thread-2)
	 (current-thread) '())
  (display 'main-thread)
  (newline)
  'main)

(define (example-01a)
  (spawn (lambda ()
	   (display 'thread-1)
	   (newline)
	   (display 'thread-1-again)
	   (newline)
	   (display 'thread-1-yet-again)
	   (newline)
	   'thread-1)
	 (current-thread) '())
  (spawn (lambda ()
	   (display 'thread-2)
	   (newline)
	   (display 'thread-2-again)
	   (newline)
	   'thread-2)
	 (current-thread) '())
  (display 'main-thread)
  (newline)
  'main)

(define (example-02)
  (let ((thread-1 (spawn (lambda ()
			   (display 'thread-1) (newline) 'thread-1)
			 (current-thread) '()))
	(thread-2 (spawn (lambda ()
			   (display 'thread-2) (newline) 'thread-2)
			 (current-thread) '())))
    (display 'main-thread)
    (newline)
    (list thread-1 thread-2)))

(define (example-03)
  (clear-all-choice-points)
  (let ((x (amb 1 2 3 4 5))
	(y (amb 2 4 6)))
    (display "Trying: ") (display (list x y)) (newline)
    (if (and (even? x) (even? y)
	     (>= (+ x y) 7))
	(list x y)
	(fail))))

#||
(let ((lst (example-03)))
     (display "Trying real hard...") (newline)
     (if (or (not (number? (first lst)))
	     (not (number? (second lst)))
	     (< (first lst) (second lst)))
	 (fail)
	 lst))
||#
